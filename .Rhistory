#se extraen de acuerdo a los patrones y se crea nueva variable
test <- test %>% mutate(metros2 = str_extract(string = test$description, pattern = paste0(x,"|",y,"|",z,"|",aa,"|",ab,"|",ac,"|",ad,"|",ae,"|",af)))
#nos quedamos solo con los valores num?ricos
test <- test %>% mutate(metros3 = str_extract(string = test$metros2, pattern = paste0(digit,"|", digit2,"|", digit3,"|", digit4,"|", digit5)))
test<- test %>% mutate(metros4 = str_replace_all(string = test$metros2, pattern = paste0(mdos, "|", metrostr, "|", metr), replacement = ""))
#lo convertimos a un valor n?m?rico
test$metros3 <- as.numeric(test$metros3)
#nos quedamos con la informaci?n
test <- test %>% mutate(metros_tot = ifelse(is.na(metros3)==T, surface_total, metros4))
test$metros_tot <- as.numeric(test$metros_tot)
#para eliminar todas las filas que contengan na en la columna de metros
test <- test %>% drop_na(metros_tot)
test <- test %>% mutate(mts_tot =ifelse(metros_tot<25, 25, metros_tot ))
test <- test %>% mutate(mts_totales2 =ifelse(mts_tot>3000, 3000, mts_tot ))
test$metros2 = NULL
test$metros3 = NULL
test$metros4 = NULL
test$metros_tot = NULL
test$mts_tot = NULL
#contar na
sum(is.na(test$metros_tot))
test <- test %>% mutate(banos2 = str_extract(string = test$description, pattern = paste0(ah,"|",ai)))
test <- test %>% mutate(banos3 = str_extract(string = test$banos2, pattern = digit))
#se convierte en num?rico puesto que se saca de texto
test$banos3 <- as.numeric(test$banos3)
test$bathrooms[is.na(test$bathrooms)] <- 0
test$banos3[is.na(test$banos3)] <- 0
test <- test %>% mutate(tot_banos= bathrooms+banos3)
test$tot_banos[test$tot_banos == 0] <- 1
table(test$tot_banos)
test$banos2 = NULL
test$banos3 = NULL
test$bedrooms[test$bedrooms == 0] <- 1
test <- test %>% mutate(rooms_tot = ifelse(is.na(rooms)==T, bedrooms+1, rooms))
sum(is.na(test$description))
test <- test[!is.na(test$description),]
test <- test %>% mutate(conjunto = str_detect(test$description, "conjunto"))
#ascensor
test <- test %>% mutate(ascensor = str_detect(test$description, "ascensor"))
test <- test %>% mutate(ascensor1 = str_detect(test$description, "acensor"))
test <- test %>% mutate(ascensor2 = str_detect(test$description, "asensor"))
#garaje
test <- test %>% mutate(garaje = str_detect(test$description, "garaje"))
test <- test %>% mutate(garaje1 = str_detect(test$description, "garage"))
test <- test %>% mutate(garaje2 = str_detect(test$description, "garages"))
test <- test %>% mutate(garaje3 = str_detect(test$description, "garajes"))
test <- test %>% mutate(garaje4 = str_detect(test$description, "garje"))
test <- test %>% mutate(garaje5 = str_detect(test$description, "garge"))
#amoblado
test <- test %>% mutate(amoblado = str_detect(test$description, "amoblado"))
test <- test %>% mutate(amoblado1 = str_detect(test$description, "amoblada"))
test <- test %>% mutate(amoblado2 = str_detect(test$description, "amovlada"))
test <- test %>% mutate(amoblado3 = str_detect(test$description, "amovlado"))
test <- test %>%
mutate(conjunto1 = ifelse(conjunto=="TRUE", 1,0),
ascensor6 = ifelse(ascensor=="TRUE", 1,0),
ascensor7 = ifelse(ascensor1=="TRUE", 1,0),
ascensor8 = ifelse(ascensor2=="TRUE", 1,0),
garaje6 = ifelse(garaje=="TRUE", 1,0),
garaje7 = ifelse(garaje1=="TRUE", 1,0),
garaje8 = ifelse(garaje2=="TRUE", 1,0),
garaje9 = ifelse(garaje3=="TRUE", 1,0),
garaje10 = ifelse(garaje4=="TRUE", 1,0),
garaje11 = ifelse(garaje5=="TRUE", 1,0),
amoblado4 = ifelse(amoblado=="TRUE", 1,0),
amoblado5 = ifelse(amoblado1=="TRUE", 1,0),
amoblado6 = ifelse(amoblado2=="TRUE", 1,0),
amoblado7 = ifelse(amoblado3=="TRUE", 1,0))
test <- test %>% mutate(ascensor9 = ascensor6 + ascensor7 + ascensor8)
test <- test %>% mutate(garaje12 = garaje6 + garaje7 + garaje8 + garaje9 + garaje10 + garaje11)
test <- test %>% mutate(amoblado8 = amoblado4 + amoblado5 + amoblado6 + amoblado7 )
table(test$amoblado8)
table(test$garaje12)
table(test$conjunto)
table(test$ascensor9)
#garaje
test$garaje12[test$garaje12 == 2] <- 1
test$garaje12[test$garaje12 == 3] <- 1
test$garaje12[test$garaje12 == 4] <- 1
test$ascensor9[test$ascensor == 2] <- 1
test$conjunto = NULL
test$ascensor = NULL
test$ascensor1 = NULL
test$ascensor2 = NULL
test$ascensor3 = NULL
test$ascensor6 = NULL
test$ascensor7= NULL
test$ascensor8 = NULL
test$garaje = NULL
test$garaje1 = NULL
test$garaje2 = NULL
test$garaje3 = NULL
test$garaje4 = NULL
test$garaje5 = NULL
test$garaje6 = NULL
test$garaje7 = NULL
test$garaje8 = NULL
test$garaje9 = NULL
test$garaje10 = NULL
test$garaje11 = NULL
test$amoblado = NULL
test$amoblado1 = NULL
test$amoblado2 = NULL
test$amoblado3 = NULL
test$amoblado4 = NULL
test$amoblado5 = NULL
test$amoblado6 = NULL
test$amoblado7 = NULL
test <- test %>% mutate(metros_4 = mts_totales2^2)
test <- test %>% mutate(apartamento = ifelse(property_type =="Apartamento", 1, 0))
test <- test %>% mutate(apartamento_ascensor = apartamento*ascensor9)
train_medallo <- subset(train, train$l3=="Medellín")
train_nevera <- subset(train, train$l3=="Bogotá D.C")
test_medallo <- subset(test, test$l3=="Medellín")
test_nevera <- subset(test, test$l3=="Bogotá D.C")
###Preparamos la base de train
##ponemos sistema de coordenadas para train Bogota
train_nevera_1 <- data.frame()
train_nevera_1<-data.frame(place= train_nevera$property_id,
lat= train_nevera$lat,
long= train_nevera$lon
)
train_nevera_1<-train_nevera_1 %>% mutate(latp=lat,longp=long)
train_nevera_1<-st_as_sf(train_nevera_1,coords=c('longp','latp'),crs=4626)
train_nevera$geometry <- train_nevera_1$geometry
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
train_medallo_1<-train_medallo_1 %>% mutate(latp=lat,longp=long)
train_medallo<-st_as_sf(train_medallo_1,coords=c('longp','latp'),crs=4626)
train_medallo$geometry <- train_medallo_1$geometry
rm(train_medallo_1)
rm(train_nevera_1)
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
PH_Poblado <- st_transform(PH_Poblado, crs=st_crs(train_medallo$geometry))
PH_Poblado <- st_transform(PH_Poblado, crs=st_crs(train_medallo$geometry))
PH_Poblado <- st_transform(PH_Poblado, crs=crs(train_medallo$geometry))
PH_Poblado <- st_transform(PH_Poblado, crs=st_crs(train_medallo$geometry))
PH_Poblado <- st_transform(PH_Poblado, crs=sf_crs(train_medallo$geometry))
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
# Observaciones en el poblado
Pobladation <- train_medallo[PH_Poblado,]
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
st_crs(PH_Poblado)
PH_Poblado <- st_transform(PH_Poblado, crs=4626)
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
st_crs(PH_Poblado)
st_crs(train_medallo$geometry)
train_medallo$geometry <- train_medallo_1$geometry
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
rm(train_nevera)
rm(train_medallo)
rm(test_medallo)
rm(test_nevera)
train_medallo <- subset(train, train$l3=="Medellín")
train_nevera <- subset(train, train$l3=="Bogotá D.C")
test_medallo <- subset(test, test$l3=="Medellín")
test_nevera <- subset(test, test$l3=="Bogotá D.C")
View(test_medallo)
###Preparamos la base de train
##ponemos sistema de coordenadas para train Bogota
train_nevera_1 <- data.frame()
train_nevera_1<-data.frame(place= train_nevera$property_id,
lat= train_nevera$lat,
long= train_nevera$lon
)
View(train_nevera)
train_nevera_1<-st_as_sf(train_nevera_1,coords=c('longp','latp'),crs=4626)
rm(train_nevera)
rm(train_nevera_1)
train_nevera <- subset(train, train$l3=="Bogotá D.C")
train_nevera_1<-data.frame(place= train_nevera$property_id,
lat= train_nevera$lat,
long= train_nevera$lon
)
train_nevera_1<-train_nevera_1 %>% mutate(latp=lat,longp=long)
train_nevera_2<-st_as_sf(train_nevera_1,coords=c('longp','latp'),crs=4626)
train_nevera$geometry <- train_nevera_2$geometry
View(train_nevera)
rm(train_medallo)
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
train_medallo <- subset(train, train$l3=="Medellín")
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
train_medallo_2<-train_medallo_1 %>% mutate(latp=lat,longp=long)
train_medallo$geometry <- train_medallo_2$geometry
rm(train_medallo_1, train_medallo_2, train_nevera_1, train_nevera_2)
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
View(test_medallo)
View(train_medallo)
train_medallo$geometry <- train_medallo_2$geometry
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
train_medallo_2<-train_medallo_1 %>% mutate(latp=lat,longp=long)
train_medallo$geometry <- train_medallo_2$geometry
View(train_medallo)
train_medallo$geometry <- train_medallo_2$geometry
train_medallo$geometry <- ()
View(train_medallo_2)
train_nevera_1<-data.frame(place= train_nevera$property_id,
lat= train_nevera$lat,
long= train_nevera$lon
)
train_nevera_1<-train_nevera_1 %>% mutate(latp=lat,longp=long)
train_nevera_2<-st_as_sf(train_nevera_1,coords=c('longp','latp'),crs=4626)
View(train_nevera_2)
train_nevera$geometry <- train_nevera_2$geometry
##ponemos sistema de coordenadas para train Medellin
train_medallo_1<-data.frame(place= train_medallo$property_id,
lat= train_medallo$lat,
long= train_medallo$lon
)
train_medallo_1<-train_medallo_1 %>% mutate(latp=lat,longp=long)
train_medallo_2<-st_as_sf(train_medallo_1,coords=c('longp','latp'),crs=4626)
train_medallo$geometry <- train_medallo_2$geometry
View(train_medallo)
rm(train_medallo_1, train_medallo_2, train_nevera_1, train_nevera_2)
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
PH_Poblado <- st_transform(PH_Poblado, crs=4626)
st_crs(PH_Poblado)
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
# Observaciones en el poblado
Pobladation <- train_medallo[PH_Poblado,]
leaflet() %>%
addTiles() %>%
addPolygons(data=PH_Poblado, col = "red") %>%
addCircles(data=Pobladation)
leaflet() %>%
addTiles() %>%
addPolygons(data=PH_Poblado, col = "red")
######Definimos el área de chapinero
chapi_papi <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
chapi_papi <- st_transform(chapi_papi, crs=st_crs(train_nevera$geometry))
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
chapineration <- train_nevera[chapi_papi,]
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red")
######Definimos el área de chapinero
chapi_papi <- getbb(place_name = "UPZ Chapinero Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
chapi_papi <- st_transform(chapi_papi, crs=st_crs(train_nevera$geometry))
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red")
#Para bogotá vamos a agregar estaciones de transmilenio y universidades pensando
# en que en esta zona vive población universitaria
######
transmi_rolos <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="bus_station")
leaflet() %>%
addPolygons(data=chapi_papi,color="red")
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red")
#Para bogotá vamos a agregar estaciones de transmilenio y universidades pensando
# en que en esta zona vive población universitaria
######
transmi_rolos <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="bus_station")
transmi_rolos_sf <- osmdata_sf(transmi_rolos)
transmi_rolos_geom <- transmi_rolos_sf$osm_points
#Le ponemos el sistema de coordenadas de train
transmi_rolos_new <- st_transform(transmi_rolos_geom, crs=st_crs(train_nevera$geometry))
st_crs(transmi_rolos_new)==st_crs(train_nevera$geometry)
#Repetimos para universidades
universidades_rolas <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="university")
uni_rolas_sf <- osmdata_sf(universidades_rolas)
uni_rolas_geom <- uni_rolas_sf$osm_polygons
#Le ponemos el sistema de coordenadas de train
uni_rolas_new <- st_transform(uni_rolas_geom, crs=st_crs(train_nevera$geometry))
st_crs(uni_rolas_new)==st_crs(train_nevera$geometry)
leaflet() %>%
addTiles()%>%
addPolygons(data=uni_rolas_geom, col = "green") %>%
addPolygons(data=chapi_papi,color="yellow") %>%
addCircleMarkers(data = transmi_rolos_new, col = "blue")
##El poblado en medellín es una zona rosa turística, por esta razón buscaremos cercanía a restaurantes
# y parques
restaurantes_paisas <- opq(bbox=getbb("Comuna 14 - El Poblado")) %>%
add_osm_feature(key="amenity", value ="restaurant")
restaurantes_paisas_sf <- osmdata_sf(restaurantes_paisas)
restaurantes_paisas_geom <- restaurantes_paisas_sf$osm_points
parques_paisas <- opq(bbox=getbb("Comuna 14 - El Poblado")) %>%
add_osm_feature(key="leisure", value ="park")
par_paisas_sf <- osmdata_sf(parques_paisas)
par_paisas_geom <- par_paisas_sf$osm_polygons
##Creamos el mapa en OSM para Medellín
leaflet() %>%
addTiles()%>%
addPolygons(data=par_paisas_geom, col = "green") %>%
addCircleMarkers(data = restaurantes_paisas_geom, col = "blue") %>%
addCircles(data=train_medallo, col = "red")
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
PH_Poblado <- st_transform(PH_Poblado, crs=4626)
st_crs(PH_Poblado)==st_crs(train_medallo$geometry)
leaflet() %>%
addTiles() %>%
addPolygons(data=PH_Poblado, col = "red")
######Definimos el área de chapinero
chapi_papi <- getbb(place_name = "UPZ Chapinero Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
chapi_papi <- st_transform(chapi_papi, crs=st_crs(train_nevera$geometry))
st_crs(chapi_papi)==st_crs(train_nevera$geometry)
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red")
#Para bogotá vamos a agregar estaciones de transmilenio y universidades pensando
# en que en esta zona vive población universitaria
######
transmi_rolos <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="bus_station")
transmi_rolos_sf <- osmdata_sf(transmi_rolos)
transmi_rolos_geom <- transmi_rolos_sf$osm_points
#Le ponemos el sistema de coordenadas de train
transmi_rolos_new <- st_transform(transmi_rolos_geom, crs=st_crs(train_nevera$geometry))
st_crs(transmi_rolos_new)==st_crs(train_nevera$geometry)
#Repetimos para universidades
universidades_rolas <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="university")
uni_rolas_sf <- osmdata_sf(universidades_rolas)
uni_rolas_geom <- uni_rolas_sf$osm_polygons
#Le ponemos el sistema de coordenadas de train
uni_rolas_new <- st_transform(uni_rolas_geom, crs=st_crs(train_nevera$geometry))
st_crs(uni_rolas_new)==st_crs(train_nevera$geometry)
leaflet() %>%
addTiles()%>%
addPolygons(data=uni_rolas_geom, col = "green") %>%
addPolygons(data=chapi_papi,color="yellow") %>%
addCircleMarkers(data = transmi_rolos_new, col = "blue")
st_crs(uni_rolas_geom)==st_crs(train_nevera$geometry)
uni_rolas_new <- st_transform(uni_rolas_geom, crs=st_crs(train_nevera$geometry))
dist_uni <- st_distance(x=train_nevera$geometry, y=uni_rolas_new)
dist_uni
#ahora sacamos la distancia promedio
prom_dist_uni <- apply(dist_uni, 1, mean)
#Pegamos a la base
####Distancia a una estación de transmilenio
dist_tra <- st_distance(x=train_nevera$geometry, y=transmi_rolos_new)
dist_tra
####Distancia mínima a una estación de transmileni
min_dist_tra <- apply(dist_tra, 1, min)
min_dist_tra
#################
#Agregamos las distancias a la base
train_nevera <- train_nevera %>%
mutate(Transmi = min_dist_tra)
train_nevera <- train_nevera %>%
mutate(Universidad = prom_dist_uni)
##El poblado en medellín es una zona rosa turística, por esta razón buscaremos cercanía a restaurantes
# y parques
restaurantes_paisas <- opq(bbox=getbb("Comuna 14 - El Poblado")) %>%
add_osm_feature(key="amenity", value ="restaurant")
restaurantes_paisas_sf <- osmdata_sf(restaurantes_paisas)
restaurantes_paisas_geom <- restaurantes_paisas_sf$osm_points
parques_paisas <- opq(bbox=getbb("Comuna 14 - El Poblado")) %>%
add_osm_feature(key="leisure", value ="park")
par_paisas_sf <- osmdata_sf(parques_paisas)
par_paisas_geom <- par_paisas_sf$osm_polygons
##Creamos el mapa en OSM para Medellín
leaflet() %>%
addTiles()%>%
addPolygons(data=par_paisas_geom, col = "green") %>%
addCircleMarkers(data = restaurantes_paisas_geom, col = "blue") %>%
addCircles(data=train_medallo, col = "red")
####Distancia promedio a un restaurante
# Primero sacamos la distancia a un restaurante
restaurantes_paisas_geom <- st_transform(restaurantes_paisas_geom, crs=st_crs(train_medallo$geometry))
st_crs(restaurantes_paisas_geom)==st_crs(train_medallo$geometry)
dist_rest <- st_distance(x=train_medallo$geometry, y=restaurantes_paisas_geom)
dist_rest
#ahora sacamos la distancia promedio
prom_dist_rest <- apply(dist_rest, 1, mean)
prom_dist_rest
####Distancia a un parque
par_paisas_geom <- st_transform(par_paisas_geom, crs=st_crs(train_medallo$geometry))
st_crs(par_paisas_geom)==st_crs(train_medallo$geometry)
dist_park <- st_distance(x=train_medallo$geometry, y=par_paisas_geom)
dist_park
####Distancia mínima a un parque
min_dist_park <- apply(dist_park, 1, min)
min_dist_park
#Agregamos las distancias a la base
train_medallo <- train_medallo %>%
mutate(Restaurante = prom_dist_rest)
train_medallo <- train_medallo %>%
mutate(Parque = min_dist_park)
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red") %>%
addCircles(data=chapineration)
test_medallo <- subset(test, test$l3=="Medellín")
test_nevera <- subset(test, test$l3=="Bogotá D.C")
test_medallo <- subset(test, test$l3=="Medellín")
test_nevera <- subset(test, test$l3=="Bogotá D.C")
rm(test_medallo)
test_medallo <- subset(test, test$l3=="Medellín")
test_medallo <- subset(test, test$l3=="Medellín")
test_nevera <- subset(test, test$l3=="Bogotá D.C")
test_nevera_1<-data.frame(place= test_nevera$property_id,
lat= test_nevera$lat,
long= test_nevera$lon
)
test_nevera_1<-test_nevera_1 %>% mutate(latp=lat,longp=long)
test_nevera_2<-st_as_sf(test_nevera_1,coords=c('longp','latp'),crs=4626)
test_nevera$geometry <- test_nevera_2$geometry
##ponemos sistema de coordenadas para test Medellin
test_medallo_1<-data.frame(place= test_medallo$property_id,
lat= test_medallo$lat,
long= test_medallo$lon
)
test_medallo_1<-test_medallo_1 %>% mutate(latp=lat,longp=long)
test_medallo_2<-st_as_sf(test_medallo_1,coords=c('longp','latp'),crs=4626)
test_medallo$geometry <- test_medallo_2$geometry
rm(test_medallo_1, test_medallo_2, test_nevera_1, test_nevera_2)
#Definimos sólo el área del poblado
PH_Poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
st_crs(PH_Poblado)==st_crs(test_medallo$geometry)
PH_Poblado <- st_transform(PH_Poblado, crs=4626)
st_crs(PH_Poblado)==st_crs(test_medallo$geometry)
leaflet() %>%
addTiles() %>%
addPolygons(data=PH_Poblado, col = "red")
######Definimos el área de chapinero
chapi_papi <- getbb(place_name = "UPZ Chapinero Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
st_crs(chapi_papi)==st_crs(test_nevera$geometry)
chapi_papi <- st_transform(chapi_papi, crs=st_crs(test_nevera$geometry))
st_crs(chapi_papi)==st_crs(test_nevera$geometry)
leaflet() %>%
addTiles() %>%
addPolygons(data=chapi_papi,color="red")
#Para bogotá vamos a agregar estaciones de transmilenio y universidades pensando
# en que en esta zona vive población universitaria
######
transmi_rolos <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="bus_station")
transmi_rolos_sf <- osmdata_sf(transmi_rolos)
transmi_rolos_geom <- transmi_rolos_sf$osm_points
#Le ponemos el sistema de coordenadas de test
transmi_rolos_new <- st_transform(transmi_rolos_geom, crs=st_crs(test_nevera$geometry))
st_crs(transmi_rolos_new)==st_crs(test_nevera$geometry)
#Repetimos para universidades
universidades_rolas <- opq(bbox=getbb("Bogota Colombia")) %>%
add_osm_feature(key="amenity", value ="university")
uni_rolas_sf <- osmdata_sf(universidades_rolas)
uni_rolas_geom <- uni_rolas_sf$osm_polygons
#Le ponemos el sistema de coordenadas de test
uni_rolas_new <- st_transform(uni_rolas_geom, crs=st_crs(test_nevera$geometry))
st_crs(uni_rolas_new)==st_crs(test_nevera$geometry)
leaflet() %>%
addTiles()%>%
addPolygons(data=uni_rolas_geom, col = "green") %>%
addPolygons(data=chapi_papi,color="yellow") %>%
addCircleMarkers(data = transmi_rolos_new, col = "blue")
leaflet() %>%
addTiles()%>%
addPolygons(data=uni_rolas_geom, col = "green") %>%
addPolygons(data=chapi_papi,color="red") %>%
addCircleMarkers(data = transmi_rolos_new, col = "blue")
View(train_medallo)
View(test_medallo)
